# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))


# -- Project information -----------------------------------------------------

project = 'Linux 常用 C 函数参考手册'
copyright = '2018-2025, 人人都懂物联网 GetIoT.tech'
author = '阿基米东'

# The full version, including alpha/beta/rc tags
release = 'v1.0'


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'recommonmark',
    'sphinx_markdown_tables'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'zh_CN'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = 'sphinx_rtd_theme'
html_theme = 'sphinx_book_theme'

# Theme options are theme-specific and customize the look and feel of a theme
html_theme_options = {
    "show_navbar_depth": 2,
    "show_toc_level": 2,
    "navbar_footer_text": "",
    "navbar_align": "left",
    "navbar_center": False,
    "navbar_end": [],
    "navbar_persistent": [],
    "navbar_start": [],
    "primary_sidebar_end": [],
    "primary_sidebar_start": [],
    "secondary_sidebar_items": ["page-toc"],
    "show_nav_level": 2,
    "show_prev_next": True,
    "toc_title": " 🐵",
    "use_edit_page_button": True,
    "use_repository_button": True,
    "use_issues_button": False,
    "use_download_button": False,
    "use_fullscreen_button": True,
    "use_secondary_sidebar": True,
    "use_sidenotes": False,
    "announcement": "",
    "icon_links": [],
    "icon_links_label": "Icon Links",
    "logo": {
        "text": "Linux C 函数手册",
    },
    "logo_text": "Linux C 函数手册",
    # 仓库相关配置
    "repository_url": "https://github.com/getiot/linux-c-functions",
    "repository_branch": "main",
    "path_to_docs": "source",
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

html_logo = '_static/images/GetIoT_Logo_150px.png'
#html_favicon = '_static/images/GetIoT_Logo_32px.png'

html_js_files = [
    'js/baidutongji.js'
]

# 配置编辑页面和仓库按钮
html_context = {
    'display_github': True,
    'github_user': 'getiot',
    'github_repo': 'linux-c-functions',
    'github_version': 'main',
    'conf_py_path': '/source/',
}
